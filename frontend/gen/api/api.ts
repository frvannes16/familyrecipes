/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AuthenticatedUser
 */
export interface AuthenticatedUser {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedUser
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedUser
     */
    first_name?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedUser
     */
    last_name?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthenticatedUser
     */
    id: number;
    /**
     * 
     * @type {Token}
     * @memberof AuthenticatedUser
     */
    token: Token;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedUser
     */
    role: string;
}
/**
 * 
 * @export
 * @interface AuthenticationResponse
 */
export interface AuthenticationResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthenticationResponse
     */
    access_token: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticationResponse
     */
    token_type: AuthenticationResponseTokenTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AuthenticationResponseTokenTypeEnum {
    Bearer = 'bearer'
}

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface PaginatedRecipes
 */
export interface PaginatedRecipes {
    /**
     * 
     * @type {number}
     * @memberof PaginatedRecipes
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedRecipes
     */
    per_page: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedRecipes
     */
    max_page: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedRecipes
     */
    result_count: number;
    /**
     * 
     * @type {Array<RecipeInDB>}
     * @memberof PaginatedRecipes
     */
    data: Array<RecipeInDB>;
}
/**
 * 
 * @export
 * @interface RecipeCreate
 */
export interface RecipeCreate {
    /**
     * 
     * @type {string}
     * @memberof RecipeCreate
     */
    name: string;
}
/**
 * 
 * @export
 * @interface RecipeInDB
 */
export interface RecipeInDB {
    /**
     * 
     * @type {string}
     * @memberof RecipeInDB
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof RecipeInDB
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RecipeInDB
     */
    created_at: string;
    /**
     * 
     * @type {number}
     * @memberof RecipeInDB
     */
    author_id: number;
    /**
     * 
     * @type {User}
     * @memberof RecipeInDB
     */
    author: User;
    /**
     * 
     * @type {Array<RecipeStepInDB>}
     * @memberof RecipeInDB
     */
    steps: Array<RecipeStepInDB>;
    /**
     * 
     * @type {Array<RecipeIngredientInDB>}
     * @memberof RecipeInDB
     */
    ingredients: Array<RecipeIngredientInDB>;
}
/**
 * 
 * @export
 * @interface RecipeIngredientCreate
 */
export interface RecipeIngredientCreate {
    /**
     * 
     * @type {string}
     * @memberof RecipeIngredientCreate
     */
    quantity: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeIngredientCreate
     */
    unit?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeIngredientCreate
     */
    item: string;
}
/**
 * 
 * @export
 * @interface RecipeIngredientInDB
 */
export interface RecipeIngredientInDB {
    /**
     * 
     * @type {string}
     * @memberof RecipeIngredientInDB
     */
    quantity: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeIngredientInDB
     */
    unit?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeIngredientInDB
     */
    item: string;
    /**
     * 
     * @type {number}
     * @memberof RecipeIngredientInDB
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof RecipeIngredientInDB
     */
    recipe_id: number;
    /**
     * 
     * @type {number}
     * @memberof RecipeIngredientInDB
     */
    position: number;
}
/**
 * 
 * @export
 * @interface RecipeStepInDB
 */
export interface RecipeStepInDB {
    /**
     * 
     * @type {number}
     * @memberof RecipeStepInDB
     */
    position: number;
    /**
     * 
     * @type {string}
     * @memberof RecipeStepInDB
     */
    content: string;
    /**
     * 
     * @type {number}
     * @memberof RecipeStepInDB
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof RecipeStepInDB
     */
    recipe_id: number;
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    access_token: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    token_type: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    expires_at: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    first_name?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    last_name?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    id: number;
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    first_name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    last_name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    password: string;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserAuthUsersPost: async (userCreate: UserCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('createUserAuthUsersPost', 'userCreate', userCreate)
            const localVarPath = `/auth/users/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAuthTokenPost: async (username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('loginAuthTokenPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('loginAuthTokenPost', 'password', password)
            const localVarPath = `/auth/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserAuthUsersPost(userCreate: UserCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserAuthUsersPost(userCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginAuthTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.loginAuthTokenPost(username, password, grantType, scope, clientId, clientSecret, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserAuthUsersPost(userCreate: UserCreate, options?: any): AxiosPromise<User> {
            return localVarFp.createUserAuthUsersPost(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {string} username 
         * @param {string} password 
         * @param {string} [grantType] 
         * @param {string} [scope] 
         * @param {string} [clientId] 
         * @param {string} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginAuthTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any): AxiosPromise<AuthenticationResponse> {
            return localVarFp.loginAuthTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Create User
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public createUserAuthUsersPost(userCreate: UserCreate, options?: any) {
        return AuthApiFp(this.configuration).createUserAuthUsersPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {string} username 
     * @param {string} password 
     * @param {string} [grantType] 
     * @param {string} [scope] 
     * @param {string} [clientId] 
     * @param {string} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public loginAuthTokenPost(username: string, password: string, grantType?: string, scope?: string, clientId?: string, clientSecret?: string, options?: any) {
        return AuthApiFp(this.configuration).loginAuthTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add Ingredient
         * @param {number} recipeId 
         * @param {RecipeIngredientCreate} recipeIngredientCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIngredientRecipesRecipeIdIngredientsPost: async (recipeId: number, recipeIngredientCreate: RecipeIngredientCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('addIngredientRecipesRecipeIdIngredientsPost', 'recipeId', recipeId)
            // verify required parameter 'recipeIngredientCreate' is not null or undefined
            assertParamExists('addIngredientRecipesRecipeIdIngredientsPost', 'recipeIngredientCreate', recipeIngredientCreate)
            const localVarPath = `/recipes/{recipe_id}/ingredients/`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearerWithCookie required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearerWithCookie", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipeIngredientCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create User Recipe
         * @param {RecipeCreate} recipeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserRecipeRecipesPost: async (recipeCreate: RecipeCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeCreate' is not null or undefined
            assertParamExists('createUserRecipeRecipesPost', 'recipeCreate', recipeCreate)
            const localVarPath = `/recipes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearerWithCookie required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearerWithCookie", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(recipeCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Generate Recipe Pdf
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRecipePdfRecipesRecipeIdGeneratePdfGet: async (recipeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('generateRecipePdfRecipesRecipeIdGeneratePdfGet', 'recipeId', recipeId)
            const localVarPath = `/recipes/{recipe_id}/generate-pdf/`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearerWithCookie required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearerWithCookie", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get My User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyUserUsersMeGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearerWithCookie required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearerWithCookie", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Recipes
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesRecipesGet: async (page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/recipes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearerWithCookie required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearerWithCookie", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Single Recipe
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleRecipeRecipesRecipeIdGet: async (recipeId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'recipeId' is not null or undefined
            assertParamExists('getSingleRecipeRecipesRecipeIdGet', 'recipeId', recipeId)
            const localVarPath = `/recipes/{recipe_id}/`
                .replace(`{${"recipe_id"}}`, encodeURIComponent(String(recipeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearerWithCookie required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearerWithCookie", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User By Id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdUsersUserIdGet: async (userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getUserByIdUsersUserIdGet', 'userId', userId)
            const localVarPath = `/users/{user_id}/`
                .replace(`{${"user_id"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User Recipes
         * @param {number} authorId 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRecipesUsersAuthorIdRecipesGet: async (authorId: number, page?: number, perPage?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorId' is not null or undefined
            assertParamExists('getUserRecipesUsersAuthorIdRecipesGet', 'authorId', authorId)
            const localVarPath = `/users/{author_id}/recipes/`
                .replace(`{${"author_id"}}`, encodeURIComponent(String(authorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearerWithCookie required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearerWithCookie", [], configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add Ingredient
         * @param {number} recipeId 
         * @param {RecipeIngredientCreate} recipeIngredientCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addIngredientRecipesRecipeIdIngredientsPost(recipeId: number, recipeIngredientCreate: RecipeIngredientCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RecipeIngredientInDB>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addIngredientRecipesRecipeIdIngredientsPost(recipeId, recipeIngredientCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create User Recipe
         * @param {RecipeCreate} recipeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserRecipeRecipesPost(recipeCreate: RecipeCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeInDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserRecipeRecipesPost(recipeCreate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Generate Recipe Pdf
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateRecipePdfRecipesRecipeIdGeneratePdfGet(recipeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateRecipePdfRecipesRecipeIdGeneratePdfGet(recipeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get My User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMyUserUsersMeGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticatedUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMyUserUsersMeGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Recipes
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRecipesRecipesGet(page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRecipes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRecipesRecipesGet(page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Single Recipe
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSingleRecipeRecipesRecipeIdGet(recipeId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeInDB>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSingleRecipeRecipesRecipeIdGet(recipeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get User By Id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserByIdUsersUserIdGet(userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserByIdUsersUserIdGet(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get User Recipes
         * @param {number} authorId 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserRecipesUsersAuthorIdRecipesGet(authorId: number, page?: number, perPage?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedRecipes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserRecipesUsersAuthorIdRecipesGet(authorId, page, perPage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add Ingredient
         * @param {number} recipeId 
         * @param {RecipeIngredientCreate} recipeIngredientCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIngredientRecipesRecipeIdIngredientsPost(recipeId: number, recipeIngredientCreate: RecipeIngredientCreate, options?: any): AxiosPromise<Array<RecipeIngredientInDB>> {
            return localVarFp.addIngredientRecipesRecipeIdIngredientsPost(recipeId, recipeIngredientCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create User Recipe
         * @param {RecipeCreate} recipeCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserRecipeRecipesPost(recipeCreate: RecipeCreate, options?: any): AxiosPromise<RecipeInDB> {
            return localVarFp.createUserRecipeRecipesPost(recipeCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Generate Recipe Pdf
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateRecipePdfRecipesRecipeIdGeneratePdfGet(recipeId: number, options?: any): AxiosPromise<any> {
            return localVarFp.generateRecipePdfRecipesRecipeIdGeneratePdfGet(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get My User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyUserUsersMeGet(options?: any): AxiosPromise<AuthenticatedUser> {
            return localVarFp.getMyUserUsersMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Recipes
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRecipesRecipesGet(page?: number, perPage?: number, options?: any): AxiosPromise<PaginatedRecipes> {
            return localVarFp.getRecipesRecipesGet(page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Single Recipe
         * @param {number} recipeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSingleRecipeRecipesRecipeIdGet(recipeId: number, options?: any): AxiosPromise<RecipeInDB> {
            return localVarFp.getSingleRecipeRecipesRecipeIdGet(recipeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User By Id
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserByIdUsersUserIdGet(userId: number, options?: any): AxiosPromise<User> {
            return localVarFp.getUserByIdUsersUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User Recipes
         * @param {number} authorId 
         * @param {number} [page] 
         * @param {number} [perPage] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserRecipesUsersAuthorIdRecipesGet(authorId: number, page?: number, perPage?: number, options?: any): AxiosPromise<PaginatedRecipes> {
            return localVarFp.getUserRecipesUsersAuthorIdRecipesGet(authorId, page, perPage, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: any): AxiosPromise<any> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add Ingredient
     * @param {number} recipeId 
     * @param {RecipeIngredientCreate} recipeIngredientCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addIngredientRecipesRecipeIdIngredientsPost(recipeId: number, recipeIngredientCreate: RecipeIngredientCreate, options?: any) {
        return DefaultApiFp(this.configuration).addIngredientRecipesRecipeIdIngredientsPost(recipeId, recipeIngredientCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create User Recipe
     * @param {RecipeCreate} recipeCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUserRecipeRecipesPost(recipeCreate: RecipeCreate, options?: any) {
        return DefaultApiFp(this.configuration).createUserRecipeRecipesPost(recipeCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Generate Recipe Pdf
     * @param {number} recipeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public generateRecipePdfRecipesRecipeIdGeneratePdfGet(recipeId: number, options?: any) {
        return DefaultApiFp(this.configuration).generateRecipePdfRecipesRecipeIdGeneratePdfGet(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get My User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMyUserUsersMeGet(options?: any) {
        return DefaultApiFp(this.configuration).getMyUserUsersMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Recipes
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getRecipesRecipesGet(page?: number, perPage?: number, options?: any) {
        return DefaultApiFp(this.configuration).getRecipesRecipesGet(page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Single Recipe
     * @param {number} recipeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getSingleRecipeRecipesRecipeIdGet(recipeId: number, options?: any) {
        return DefaultApiFp(this.configuration).getSingleRecipeRecipesRecipeIdGet(recipeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User By Id
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserByIdUsersUserIdGet(userId: number, options?: any) {
        return DefaultApiFp(this.configuration).getUserByIdUsersUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User Recipes
     * @param {number} authorId 
     * @param {number} [page] 
     * @param {number} [perPage] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserRecipesUsersAuthorIdRecipesGet(authorId: number, page?: number, perPage?: number, options?: any) {
        return DefaultApiFp(this.configuration).getUserRecipesUsersAuthorIdRecipesGet(authorId, page, perPage, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: any) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}


